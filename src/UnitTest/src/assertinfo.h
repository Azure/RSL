#pragma once

// Created by HaoyongZ, Nov 2003
// Don't include this file directly, include "unittest.h" instead.

// The following macros are intended to be called by the unittest programs.
// We need macros instead of functions because we need the source filename and line numbers.
// See unittest.h and the sample code for usage information.

namespace RSLibImpl
{

#define UT_AssertIsTrue         CUnitTestAssertInfo (__FILE__, __LINE__).IsTrueHandler
#define UT_AssertIsFalse        CUnitTestAssertInfo (__FILE__, __LINE__).IsFalseHandler
#define UT_AssertIsNull         CUnitTestAssertInfo (__FILE__, __LINE__).IsNullHandler
#define UT_AssertIsNotNull      CUnitTestAssertInfo (__FILE__, __LINE__).IsNotNullHandler
#define UT_AssertAreSame        CUnitTestAssertInfo (__FILE__, __LINE__).AreSameHandler
#define UT_AssertAreEqual       CUnitTestAssertInfo (__FILE__, __LINE__).AreEqualHandler
#define UT_AssertFail           CUnitTestAssertInfo (__FILE__, __LINE__).FailHandler
#define UT_AssertSzAreEqual     CUnitTestAssertInfo (__FILE__, __LINE__).SzAreEqualHandler
#define UT_AssertWzAreEqual     CUnitTestAssertInfo (__FILE__, __LINE__).WzAreEqualHandler

class CUnitTestAssertInfo
{
public:
    CUnitTestAssertInfo (const char * cszFile, UINT32 u32LineNumber);
    ~CUnitTestAssertInfo();

    void IsTrueHandler (BOOL fExpr, const char * cszFormat = NULL, ...);
    void IsFalseHandler (BOOL fExpr, const char * cszFormat = NULL, ...);
    void IsNullHandler (const void * ptr, const char * cszFormat = NULL, ...);
    void IsNotNullHandler (const void * ptr, const char * cszFormat = NULL, ...);
    void AreSameHandler (const void * ptr1, const void * ptr2, const char * cszFormat = NULL, ...);
    void AreEqualHandler (INT64 n1, INT64 n2, const char * cszFormat = NULL, ...);
    void AreEqualHandler (double lf1, double lf2, double lfPrecision, const char * cszFormat = NULL, ...);
    void FailHandler (const char * cszFormat = NULL, ...);
    void SzAreEqualHandler (const char * csz1, const char * csz2, const char * cszFormat = NULL, ...);
    void WzAreEqualHandler (const WCHAR * cwz1, const WCHAR * cwz2, const char * cszFormat = NULL, ...);

public:
    static bool MustDebugBreakOnFailure();

private:
    void SetComment (BOOL fExpr, const char * cszCommentFormat, ...);
    void InternalAssertHandler (BOOL fExpr);

    const char * m_cszFile;
    const UINT32 m_u32LineNumber;
    char *m_pszComment; // Buffer used to hold short comment generated by the framework
    char *m_pszError; // Buffer used to hold formatted error message provided by the user
    static int _debugBreakOnFailure;    // flag describing if DebugBreak is desired on failures.

    // Disable the assignment operator so this class cannot be assigned.
    CUnitTestAssertInfo &operator= (const CUnitTestAssertInfo &) {}
};
} // namespace RSLibImpl
